{
  "address": "0x181b557bC9005d0933700f06622f6904dEa3029D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_semaphoreId",
          "type": "uint256"
        }
      ],
      "name": "UserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "UserRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_semaphoreId",
          "type": "uint256"
        }
      ],
      "name": "addUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_semaphoreId",
          "type": "uint256"
        }
      ],
      "name": "isVerifiedSemaphoreId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isVerifiedUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "removeUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6f7197b875ff0f2cb98adb780c86f27685c5aff581709fd7d0f32eb708cfd89",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "430037",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000001000000000002000000000000000000020000000000000000000000000000000000000000000000000800000000000000000",
    "blockHash": "0x2b91375b9369633e1d29d595aae928f75a279b5994aa45a75a7b978500810417",
    "transactionHash": "0xb6f7197b875ff0f2cb98adb780c86f27685c5aff581709fd7d0f32eb708cfd89",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0xb6f7197b875ff0f2cb98adb780c86f27685c5aff581709fd7d0f32eb708cfd89",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2b91375b9369633e1d29d595aae928f75a279b5994aa45a75a7b978500810417"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "430037",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "da13a14ca12544a804c2d97d9c645497",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_semaphoreId\",\"type\":\"uint256\"}],\"name\":\"UserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"UserRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_semaphoreId\",\"type\":\"uint256\"}],\"name\":\"addUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_semaphoreId\",\"type\":\"uint256\"}],\"name\":\"isVerifiedSemaphoreId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isVerifiedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A simple semaphore user registry managed by a trusted entity.\",\"kind\":\"dev\",\"methods\":{\"addUser(address,uint256)\":{\"details\":\"Add verified unique user to the registry.\"},\"isVerifiedSemaphoreId(uint256)\":{\"details\":\"Check if the semaphore Id is verified.\"},\"isVerifiedUser(address)\":{\"details\":\"Check if the user is verified.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeUser(address)\":{\"details\":\"Remove user from the registry.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SemaphoreUserRegistry.sol\":\"SemaphoreUserRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IUserRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Interface of the registry of verified users.\\n */\\ninterface IUserRegistry {\\n\\n  function isVerifiedUser(address _user) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x314186c5323393af1e0e4a61b02bd14c934b941dd19de149579b79109882869a\",\"license\":\"GPL-3.0\"},\"contracts/SemaphoreUserRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.10;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport './IUserRegistry.sol';\\n\\n/**\\n * @dev A simple semaphore user registry managed by a trusted entity.\\n */\\ncontract SemaphoreUserRegistry is Ownable, IUserRegistry {\\n\\n  mapping(address => bool) private users;\\n  mapping(uint256 => bool) private semaphoreIds;\\n  mapping(address => uint256) private userToSemaphoreId;\\n\\n  // Events\\n  event UserAdded(address indexed _user, uint256 _semaphoreId);\\n  event UserRemoved(address indexed _user);\\n\\n  /**\\n    * @dev Add verified unique user to the registry.\\n    */\\n  function addUser(address _user, uint256 _semaphoreId)\\n    external\\n    onlyOwner\\n  {\\n    require(_user != address(0), 'UserRegistry: User address is zero');\\n    require(_semaphoreId != 0, 'UserRegistry: Semaphore Id is zero');\\n    require(!users[_user], 'UserRegistry: User already verified');\\n    require(!semaphoreIds[_semaphoreId], 'UserRegistry: Semaphore Id already registered' );\\n    users[_user] = true;\\n    semaphoreIds[_semaphoreId] = true;\\n    userToSemaphoreId[_user] = _semaphoreId;\\n    emit UserAdded(_user, _semaphoreId);\\n  }\\n\\n  /**\\n    * @dev Remove user from the registry.\\n    */\\n  function removeUser(address _user)\\n    external\\n    onlyOwner\\n  {\\n    require(users[_user], 'UserRegistry: User is not in the registry');\\n    uint256 _semaphoreId = userToSemaphoreId[_user];\\n    delete users[_user];\\n    delete semaphoreIds[_semaphoreId];\\n    delete userToSemaphoreId[_user];\\n    emit UserRemoved(_user);\\n  }\\n\\n  /**\\n    * @dev Check if the user is verified.\\n    */\\n  function isVerifiedUser(address _user)\\n    override\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return users[_user];\\n  }\\n\\n  /**\\n    * @dev Check if the semaphore Id is verified.\\n    */\\n  function isVerifiedSemaphoreId(uint256 _semaphoreId)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return semaphoreIds[_semaphoreId];\\n  }\\n\\n}\\n\",\"keccak256\":\"0x9208064f64a869ef0c2ead51f618f661b7ac3e213649ed00a81bddc4cc31c0c8\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61065b8061007e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100f0578063985751881461010b578063d30171931461011e578063f2fde38b1461013157600080fd5b80633da1c0c314610082578063445a6291146100c3578063715018a6146100e6575b600080fd5b6100ae6100903660046105c0565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100ae6100d13660046105e2565b60009081526002602052604090205460ff1690565b6100ee610144565b005b6000546040516001600160a01b0390911681526020016100ba565b6100ee6101193660046105c0565b610158565b6100ee61012c3660046105fb565b610255565b6100ee61013f3660046105c0565b610481565b61014c6104fa565b6101566000610554565b565b6101606104fa565b6001600160a01b03811660009081526001602052604090205460ff166101df5760405162461bcd60e51b815260206004820152602960248201527f5573657252656769737472793a2055736572206973206e6f7420696e2074686560448201526820726567697374727960b81b60648201526084015b60405180910390fd5b6001600160a01b0381166000818152600360208181526040808420805460018452828620805460ff1990811690915581875260028552838720805490911690558686529390925290839055519092917fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d91a25050565b61025d6104fa565b6001600160a01b0382166102be5760405162461bcd60e51b815260206004820152602260248201527f5573657252656769737472793a20557365722061646472657373206973207a65604482015261726f60f01b60648201526084016101d6565b806000036103195760405162461bcd60e51b815260206004820152602260248201527f5573657252656769737472793a2053656d6170686f7265204964206973207a65604482015261726f60f01b60648201526084016101d6565b6001600160a01b03821660009081526001602052604090205460ff161561038e5760405162461bcd60e51b815260206004820152602360248201527f5573657252656769737472793a205573657220616c72656164792076657269666044820152621a595960ea1b60648201526084016101d6565b60008181526002602052604090205460ff16156104035760405162461bcd60e51b815260206004820152602d60248201527f5573657252656769737472793a2053656d6170686f726520496420616c72656160448201526c191e481c9959da5cdd195c9959609a1b60648201526084016101d6565b6001600160a01b0382166000818152600160208181526040808420805460ff1990811685179091558685526002835281852080549091169093179092558383526003815291819020849055518381527f25ddd06f7eaeb83bb3fbcaa231d4b89e2d7bcd781043983661920061e755a7f0910160405180910390a25050565b6104896104fa565b6001600160a01b0381166104ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101d6565b6104f781610554565b50565b6000546001600160a01b031633146101565760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101d6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146105bb57600080fd5b919050565b6000602082840312156105d257600080fd5b6105db826105a4565b9392505050565b6000602082840312156105f457600080fd5b5035919050565b6000806040838503121561060e57600080fd5b610617836105a4565b94602093909301359350505056fea264697066735822122093037a44e2ad22e88511291da30403dab5fe7addc2867cd35d6ce80d77437ccd64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100f0578063985751881461010b578063d30171931461011e578063f2fde38b1461013157600080fd5b80633da1c0c314610082578063445a6291146100c3578063715018a6146100e6575b600080fd5b6100ae6100903660046105c0565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100ae6100d13660046105e2565b60009081526002602052604090205460ff1690565b6100ee610144565b005b6000546040516001600160a01b0390911681526020016100ba565b6100ee6101193660046105c0565b610158565b6100ee61012c3660046105fb565b610255565b6100ee61013f3660046105c0565b610481565b61014c6104fa565b6101566000610554565b565b6101606104fa565b6001600160a01b03811660009081526001602052604090205460ff166101df5760405162461bcd60e51b815260206004820152602960248201527f5573657252656769737472793a2055736572206973206e6f7420696e2074686560448201526820726567697374727960b81b60648201526084015b60405180910390fd5b6001600160a01b0381166000818152600360208181526040808420805460018452828620805460ff1990811690915581875260028552838720805490911690558686529390925290839055519092917fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d91a25050565b61025d6104fa565b6001600160a01b0382166102be5760405162461bcd60e51b815260206004820152602260248201527f5573657252656769737472793a20557365722061646472657373206973207a65604482015261726f60f01b60648201526084016101d6565b806000036103195760405162461bcd60e51b815260206004820152602260248201527f5573657252656769737472793a2053656d6170686f7265204964206973207a65604482015261726f60f01b60648201526084016101d6565b6001600160a01b03821660009081526001602052604090205460ff161561038e5760405162461bcd60e51b815260206004820152602360248201527f5573657252656769737472793a205573657220616c72656164792076657269666044820152621a595960ea1b60648201526084016101d6565b60008181526002602052604090205460ff16156104035760405162461bcd60e51b815260206004820152602d60248201527f5573657252656769737472793a2053656d6170686f726520496420616c72656160448201526c191e481c9959da5cdd195c9959609a1b60648201526084016101d6565b6001600160a01b0382166000818152600160208181526040808420805460ff1990811685179091558685526002835281852080549091169093179092558383526003815291819020849055518381527f25ddd06f7eaeb83bb3fbcaa231d4b89e2d7bcd781043983661920061e755a7f0910160405180910390a25050565b6104896104fa565b6001600160a01b0381166104ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101d6565b6104f781610554565b50565b6000546001600160a01b031633146101565760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101d6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146105bb57600080fd5b919050565b6000602082840312156105d257600080fd5b6105db826105a4565b9392505050565b6000602082840312156105f457600080fd5b5035919050565b6000806040838503121561060e57600080fd5b610617836105a4565b94602093909301359350505056fea264697066735822122093037a44e2ad22e88511291da30403dab5fe7addc2867cd35d6ce80d77437ccd64736f6c63430008110033",
  "devdoc": {
    "details": "A simple semaphore user registry managed by a trusted entity.",
    "kind": "dev",
    "methods": {
      "addUser(address,uint256)": {
        "details": "Add verified unique user to the registry."
      },
      "isVerifiedSemaphoreId(uint256)": {
        "details": "Check if the semaphore Id is verified."
      },
      "isVerifiedUser(address)": {
        "details": "Check if the user is verified."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeUser(address)": {
        "details": "Remove user from the registry."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SemaphoreUserRegistry.sol:SemaphoreUserRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 158,
        "contract": "contracts/SemaphoreUserRegistry.sol:SemaphoreUserRegistry",
        "label": "users",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 162,
        "contract": "contracts/SemaphoreUserRegistry.sol:SemaphoreUserRegistry",
        "label": "semaphoreIds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 166,
        "contract": "contracts/SemaphoreUserRegistry.sol:SemaphoreUserRegistry",
        "label": "userToSemaphoreId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
